/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JF_Mysql.java
 *
 * Created on 17/07/2011, 12:10:26
 */
package br.com.locadora.view;

import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author michel
 */
public class EfetuaBackup extends javax.swing.JFrame {

    public TelaPrincipal janelapai;
    public String textArea;
    private ResourceBundle config;
    private static String VERSION = "1.0.0";
    private static String SEPARATOR = File.separator;
//Caminho de Backup no Mac    
//    private static String MYSQL_PATH
//            = SEPARATOR
//            + "usr" + SEPARATOR
//            + "local" + SEPARATOR
//            + "mysql-5.6.21-osx10.8-x86_64" + SEPARATOR
//            + "bin" + SEPARATOR;

    private static String MYSQL_PATH
            = "C:" + SEPARATOR
            + "Arquivos de programas" + SEPARATOR
            + "MySQL" + SEPARATOR
            + "MySQL Server 5.6" + SEPARATOR
            + "bin" + SEPARATOR;
    
    private static String PRESENTATION
            = "=====================================\n"
            + "  Backup do banco de dados MySQL - Versao " + VERSION + "\n"
            + "  Autor: Alencar Santos Buriti Junior\n"
            + "  Desenvolvido em 27/01/2015\n"
            + "=====================================\n";

  // Lista dos bancos de dados a serem "backupeados"; se desejar adicionar mais,
    // basta colocar o nome separado por espaços dos outros nomes
    private static String DATABASES
            = "locadora";

    private List<String> dbList = new ArrayList<String>();

    /**
     * Creates new form JF_Mysql
     */
    public EfetuaBackup() {
        initComponents();
        janelapai = null;
        try {
            JFC_Salvar_Backup.setVisible(false);            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e, "Erro!", 2);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        JFC_Salvar_Backup = new javax.swing.JFileChooser();
        JB_Backup = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jta_backup = new javax.swing.JTextArea();
        jb_cancelar = new javax.swing.JButton();
        JB_Backup1 = new javax.swing.JButton();

        JFC_Salvar_Backup.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        JB_Backup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/backup.png"))); // NOI18N
        JB_Backup.setText("Backup");
        JB_Backup.setPreferredSize(new java.awt.Dimension(100, 40));
        JB_Backup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_BackupActionPerformed(evt);
            }
        });

        jta_backup.setEditable(false);
        jta_backup.setBackground(new java.awt.Color(0, 0, 0));
        jta_backup.setColumns(20);
        jta_backup.setForeground(new java.awt.Color(255, 255, 255));
        jta_backup.setRows(5);
        jScrollPane1.setViewportView(jta_backup);

        jb_cancelar.setFont(new java.awt.Font("Helvetica Neue", 0, 13)); // NOI18N
        jb_cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/sair.png"))); // NOI18N
        jb_cancelar.setText("Sair");
        jb_cancelar.setMaximumSize(new java.awt.Dimension(101, 33));
        jb_cancelar.setPreferredSize(new java.awt.Dimension(100, 40));
        jb_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_cancelarActionPerformed(evt);
            }
        });
        jb_cancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jb_cancelarKeyPressed(evt);
            }
        });

        JB_Backup1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/locadora/image/backup.png"))); // NOI18N
        JB_Backup1.setText("Restaurar");
        JB_Backup1.setPreferredSize(new java.awt.Dimension(100, 40));
        JB_Backup1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JB_Backup1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JB_Backup1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JB_Backup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jb_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_Backup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JB_Backup1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(400, 302));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JB_BackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_BackupActionPerformed

        try {
            String arquivo = null;

            JFC_Salvar_Backup.setVisible(true);

            int result = JFC_Salvar_Backup.showSaveDialog(null);

            if (result == JFileChooser.APPROVE_OPTION) {
                arquivo = JFC_Salvar_Backup.getSelectedFile().toString().concat(".sql");
                System.out.println("Arquivo: " + arquivo);
                File file = new File(arquivo);

                if (file.exists()) {
                    Object[] options = {"Sim", "Não"};
                    int opcao = JOptionPane.showOptionDialog(null, "Este arquivo já existe. Quer sobreescrever este arquivo?", "Atenção!!!",
                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                    if (opcao == JOptionPane.YES_OPTION) {
                        efetuarBackup(arquivo);
                    } else {
                        JB_BackupActionPerformed(evt);
                    }
                } else {
                    efetuarBackup(arquivo);
                }

            }

        } catch (Exception e) {
            textArea = textArea + "Erro!..." + e;
            jta_backup.setText(textArea);
        }

    }//GEN-LAST:event_JB_BackupActionPerformed
    TelaPrincipal tela;
private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    setVisible(false);

    // TODO add your handling code here:
}//GEN-LAST:event_formWindowClosed

    private void jb_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_cancelarActionPerformed
        retornaJanelaPai();
    }//GEN-LAST:event_jb_cancelarActionPerformed

    private void jb_cancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jb_cancelarKeyPressed
        acionarAtalho(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jb_cancelarKeyPressed

    private void JB_Backup1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JB_Backup1ActionPerformed
        try {
            String arquivo = null;
            
            JFC_Salvar_Backup.setVisible(true);

            int result = JFC_Salvar_Backup.showOpenDialog(null);

            if (result == JFileChooser.APPROVE_OPTION) {
                arquivo = JFC_Salvar_Backup.getSelectedFile().toString();
                System.out.println("Arquivo: " + arquivo);
                File file = new File(arquivo);

                if (file.exists()) {
                    restaurarBackup(arquivo);                    
                } else {
                    textArea = textArea + "Arquivo não encontrado.\n";
                }

            }

        } catch (Exception e) {
            textArea = textArea + "Erro!..." + e;
            jta_backup.setText(textArea);
        }

        
// TODO add your handling code here:
    }//GEN-LAST:event_JB_Backup1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new EfetuaBackup().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JB_Backup;
    private javax.swing.JButton JB_Backup1;
    private javax.swing.JFileChooser JFC_Salvar_Backup;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jb_cancelar;
    private javax.swing.JTextArea jta_backup;
    // End of variables declaration//GEN-END:variables

    public void efetuarBackup(String arquivo) {

//        String command = MYSQL_PATH + "mysqldump.exe";
        String command = MYSQL_PATH + "mysqldump";

        String[] databases = DATABASES.split(" ");

        for (int i = 0; i < databases.length; i++) {
            dbList.add(databases[i]);
        }

        textArea = PRESENTATION;
        jta_backup.setText(textArea);
        textArea = textArea + "Iniciando backups...\n";
        jta_backup.setText(textArea);

        // Contador
        int i = 1;

        // Tempo
        long time1, time2, time;

        // Início
        time1 = System.currentTimeMillis();

        config = ResourceBundle.getBundle("br.com.locadora.conexao.bancodedados");

        for (String dbName : dbList) {

            ProcessBuilder pb = new ProcessBuilder(
                    command,
                    "--user=" + config.getString("usuario"),
                    "--password=" + config.getString("senha"),
                    dbName,
                    "--result-file=" + arquivo);

            try {
                textArea = textArea + "Backup do banco de dados (" + i + "): " + dbName + " ...\n";
                jta_backup.setText(textArea);
                System.out.println(
                        "Backup do banco de dados (" + i + "): " + dbName + " ...");

                pb.start();

            } catch (Exception e) {
                textArea = textArea + e.getMessage() + "\n";
                jta_backup.setText(textArea);
            }

            i++;

        }

        // Fim
        time2 = System.currentTimeMillis();

        // Tempo total da operação
        time = time2 - time1;

        // Avisa do sucesso
        textArea = textArea + "Backups realizados com sucesso.\n";
        jta_backup.setText(textArea);
        textArea = textArea + "Tempo total de processamento: " + time + " ms\n";
        jta_backup.setText(textArea);
        textArea = textArea + "Finalizando...\n";
        jta_backup.setText(textArea);

        try {

            // Paralisa por 2 segundos
            Thread.sleep(2000);
            textArea = textArea + "Fim...\n";

        } catch (Exception e) {
        }

    }
    
    public void restaurarBackup(String arquivo) {

//        String command = MYSQL_PATH + "mysqldump.exe";
        String command = MYSQL_PATH + "mysql";

        String[] databases = DATABASES.split(" ");

        for (int i = 0; i < databases.length; i++) {
            dbList.add(databases[i]);
        }

        textArea = PRESENTATION;
        jta_backup.setText(textArea);
        textArea = textArea + "Iniciando restore...\n";
        jta_backup.setText(textArea);

        // Contador
        int i = 1;

        // Tempo
        long time1, time2, time;

        // Início
        time1 = System.currentTimeMillis();

        config = ResourceBundle.getBundle("br.com.locadora.conexao.bancodedados");

        for (String dbName : dbList) {
            
//            Runtime runtime = Runtime.getRuntime();
//            try {
//                
//                runtime.exec(command+
//                        " --host=localhost "+
//                        " --user=" + config.getString("usuario")+
//                        " --password=" + config.getString("senha")+
//                        " --port=3306 --default-character-set=utf8 --comments"+
//                        " --database="+dbName+  
//                        " < '" + arquivo+"'");
//            } catch (IOException ex) {
//                Logger.getLogger(EfetuaBackup.class.getName()).log(Level.SEVERE, null, ex);
//            }

            ProcessBuilder pb = new ProcessBuilder(
                    command,
                    " --host=localhost ",
                    " --user=" + config.getString("usuario"),
                    " --password=" + config.getString("senha"),
                    " --port=3306 --default-character-set=utf8 --comments",
                    " --database="+dbName,
                    " < '" + arquivo+"'");
            
            System.out.println(command+
                    " --host=localhost "+
                    " --user=" + config.getString("usuario")+
                    " --password=" + config.getString("senha")+
                    " --port=3306 --default-character-set=utf8 --comments"+
                    " --database="+dbName+
                    " < '" + arquivo+"'");

            try {
                textArea = textArea + "Restauração de Backup do banco de dados (" + i + "): " + dbName + " ...\n";
                jta_backup.setText(textArea);

                pb.start();  
                textArea = textArea + pb.start()+"\n";
                jta_backup.setText(textArea);
                textArea = textArea + pb.redirectError()+"\n";
                jta_backup.setText(textArea);
                pb.redirectError();

            } catch (Exception e) {
                textArea = textArea + e.getMessage() + "\n";
                jta_backup.setText(textArea);
            }

            i++;

        }

        // Fim
        time2 = System.currentTimeMillis();

        // Tempo total da operação
        time = time2 - time1;

        // Avisa do sucesso
        textArea = textArea + "Restauração de Backup realizada com sucesso.\n";
        jta_backup.setText(textArea);
        textArea = textArea + "Tempo total de processamento: " + time + " ms\n";
        jta_backup.setText(textArea);
        textArea = textArea + "Finalizando...\n";
        jta_backup.setText(textArea);

        try {

            // Paralisa por 2 segundos
            Thread.sleep(5000);
            textArea = textArea + "Fim...\n";
            jta_backup.setText(textArea);
        } catch (Exception e) {
        }

    }

    private void retornaJanelaPai() {
        this.setVisible(false);
        if(janelapai != null){
            janelapai.setStatusTela(true);
        }
    }

    private void acionarAtalho(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            retornaJanelaPai();
        }
    }

}
